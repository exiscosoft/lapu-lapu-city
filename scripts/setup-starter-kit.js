#!/usr/bin/env node

/**
 * Local Government Website Starter Kit Setup Script
 *
 * This script helps set up a new local government website from the starter kit
 * by replacing placeholder content with government-specific information.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Helper function to ask questions
function askQuestion(question) {
  return new Promise(resolve => {
    rl.question(question, answer => {
      resolve(answer.trim());
    });
  });
}

// Helper function to replace text in files
function replaceInFile(filePath, replacements) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');

    for (const [search, replace] of Object.entries(replacements)) {
      content = content.replace(new RegExp(search, 'g'), replace);
    }

    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Updated ${filePath}`);
  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
  }
}

// Main setup function
async function setupStarterKit() {
  console.log('üèõÔ∏è  Local Government Website Starter Kit Setup');
  console.log('===============================================\n');

  // Collect government information
  console.log('Please provide your local government information:\n');

  const governmentName = await askQuestion(
    'Government Name (e.g., "City of Manila"): '
  );
  const governmentType =
    (await askQuestion('Government Type (City/Municipality) [City]: ')) ||
    'City';
  const region = await askQuestion('Region (e.g., "NCR", "Region VII"): ');
  const province = await askQuestion(
    'Province (e.g., "Metro Manila", "Cebu"): '
  );
  const mayor = await askQuestion('Mayor/Governor Name: ');
  const websiteUrl = await askQuestion(
    'Website URL (e.g., "https://manila.gov.ph"): '
  );
  const contactEmail = await askQuestion('Contact Email: ');
  const contactPhone = await askQuestion('Contact Phone: ');

  console.log('\nüìù Setting up your government website...\n');

  // Define replacements
  const replacements = {
    'Your City/Municipality Name': governmentName,
    'Your City Name': governmentName,
    'Your Government Name': governmentName,
    'Your City': governmentName,
    'Your Municipality': governmentName,
    'Your City/Municipality': governmentName,
    'Your Government': governmentName,
    'Your Website': websiteUrl,
    'your-website.gov.ph': websiteUrl
      .replace('https://', '')
      .replace('http://', ''),
    'your-city.gov.ph': websiteUrl
      .replace('https://', '')
      .replace('http://', ''),
    'info@your-website.gov.ph': contactEmail,
    'info@your-city.gov.ph': contactEmail,
    '\\(032\\) 123-4567': contactPhone,
    'Region VII': region,
    Cebu: province,
    "Your Mayor\\'s Name": mayor,
    "Your Vice Mayor\\'s Name": 'Vice Mayor Name', // This would need to be asked separately
  };

  // Files to update
  const filesToUpdate = [
    'src/data/government.yaml',
    'src/data/services.yaml',
    'src/data/navigation.ts',
    'src/i18n/locales/en.json',
    'src/i18n/locales/fil.json',
    'STARTER-KIT-README.md',
    'CONTENT-GUIDE.md',
    'DEPLOYMENT-GUIDE.md',
  ];

  // Update files
  for (const file of filesToUpdate) {
    const filePath = path.join(projectRoot, file);
    if (fs.existsSync(filePath)) {
      replaceInFile(filePath, replacements);
    }
  }

  // Create environment file
  const envContent = `# Local Government Website Configuration
# Generated by setup script

# Government Information
VITE_GOVERNMENT_NAME="${governmentName}"
VITE_GOVERNMENT_TYPE="${governmentType}"
VITE_REGION="${region}"
VITE_PROVINCE="${province}"

# Website Information
VITE_WEBSITE_URL="${websiteUrl}"
VITE_CONTACT_EMAIL="${contactEmail}"
VITE_CONTACT_PHONE="${contactPhone}"

# Social Media (Optional)
VITE_FACEBOOK_URL="https://facebook.com/your-government"
VITE_TWITTER_URL="https://twitter.com/your-government"
VITE_INSTAGRAM_URL="https://instagram.com/your-government"
VITE_YOUTUBE_URL="https://youtube.com/your-government"

# SEO
VITE_SITE_DESCRIPTION="Official website of ${governmentName}"
VITE_SITE_KEYWORDS="government, local government, services, ${governmentName.toLowerCase()}"
VITE_OG_IMAGE_URL="${websiteUrl}/og-image.jpg"
VITE_TWITTER_HANDLE="@your-government"

# Analytics (Optional)
VITE_GOOGLE_ANALYTICS_ID=""
VITE_FACEBOOK_PIXEL_ID=""
`;

  fs.writeFileSync(path.join(projectRoot, '.env.local'), envContent);
  console.log('‚úÖ Created .env.local file');

  // Create content template files
  console.log('\nüìÑ Creating content templates...');

  const contentTemplates = [
    {
      path: 'content/services/health-services/index.yaml',
      content: `# Health Services Category Pages
# This file contains all the pages/services available under the Health Services category

pages:
  - name: 'Get free check-ups, basic medicines, and vaccines'
    slug: 'get-free-check-ups-basic-medicines-and-vaccines'
    description: 'Access free medical check-ups, basic medicines, and vaccination services provided by your local government.'
    
  - name: 'Access maternal care and child immunization'
    slug: 'access-maternal-care-and-child-immunization'
    description: 'Information about maternal health services and child immunization programs available in your area.'
    
  - name: 'Go to the local hospital for treatment or confinement'
    slug: 'go-to-the-local-hospital-for-treatment-or-confinement'
    description: 'Details about local hospital services, treatment options, and confinement procedures.'
    
  - name: 'Join health programs (nutrition, dengue control, TB treatment)'
    slug: 'join-health-programs-nutrition-dengue-control-tb-treatment'
    description: 'Participate in various health programs including nutrition support, dengue control, and TB treatment initiatives.'
`,
    },
  ];

  for (const template of contentTemplates) {
    const templatePath = path.join(projectRoot, template.path);
    const templateDir = path.dirname(templatePath);

    if (!fs.existsSync(templateDir)) {
      fs.mkdirSync(templateDir, {
        recursive: true,
      });
    }

    fs.writeFileSync(templatePath, template.content);
    console.log(`‚úÖ Created template: ${template.path}`);
  }

  console.log('\nüéâ Setup complete!');
  console.log('\nNext steps:');
  console.log(
    '1. Review and update the .env.local file with your specific information'
  );
  console.log('2. Customize the content in content/ with your local services');
  console.log('3. Update images and branding in public/ folder');
  console.log('4. Run "npm run dev" to start development server');
  console.log('5. Follow the DEPLOYMENT-GUIDE.md to deploy your website');

  console.log('\nüìö Documentation:');
  console.log('- STARTER-KIT-README.md - Complete setup guide');
  console.log('- CONTENT-GUIDE.md - Content writing guidelines');
  console.log('- DEPLOYMENT-GUIDE.md - Deployment instructions');

  rl.close();
}

// Run the setup
setupStarterKit().catch(console.error);
